@use "./breakpoints";
@use "sass:math";
@use "sass:map";

@function vw($viewport, $size) {
  @return math.div($size, map.get($breakpoints-min, $viewport)) * 100vw;
}

@function vwDesktop($size) {
  @return vw(desktop, $size);
}

@function vwMobile($size) {
  @return vw(mobile, $size);
}

@mixin mobile() {
  @media (max-width: #{map.get($breakpoints-min, sm)}px) {
    @content;
  }
}

@mixin hover() {
  @media (hover: hover) {
    @content;
  }
}

@mixin font-face(
  $font-family,
  $font-name,
  $weight: 400,
  $style: normal,
  $extension: "woff2"
) {
  @font-face {
    font-family: $font-family;
    // src: url("@/assets/font/"+$font-family+"/" + $font-name+".woff2") format("woff2"),
    // url("@/assets/font/" + $font-family + "/" + $font-name+".woff") format("woff");
    src: url("../fonts/new-fonts/" + $font-family + "/" + $font-name + "." + $extension)
      format("woff");
    test: url("../fonts/new-fonts/" + $font-family + "/" + $font-name + "." + $extension);
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}

@mixin paddingRatio($width, $height) {
  padding-top: calc(#{$height} / #{$width} * 100%);
}

@mixin scale($property, $max-width, $min-width, $max-size, $min-size) {
  #{$property}: calc(
    #{$max-size} - (#{$max-width} - var(--viewport-width)) / (
        #{$max-width} - #{$min-width}
      ) * (#{$max-size} - #{$min-size})
  );
}

@mixin mscale($max-width, $min-width, $map) {
  @each $property, $value in $map {
    #{$property}: calc(
      #{nth($value, 1)} -
        (#{$max-width} - var(--viewport-width)) /
        (#{$max-width} - #{$min-width}) *
        (#{nth($value, 1)} - #{nth($value, 2)})
    );
  }
}
//---------------------------  Offsets table ------------------------------------

// Get offset size from table

@function foffset($color, $min-viewport) {
  $color-map: map.get($offsets, $color);
  @if map.has-key($color-map, $min-viewport) {
    @return map.get($color-map, $min-viewport);
  }
}

@mixin offset-media($prop, $color) {
  #{$prop}: foffset($color, bg);
  @media screen and (min-width: (map.get(breakpoints.$breakpoints-min, lg) * 1px)) {
    #{$prop}: foffset($color, lg);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, bg) * 1px)) {
    #{$prop}: foffset($color, sm);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, sm) * 1px)) {
    #{$prop}: foffset($color, xs);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, xs) * 1px)) {
    #{$prop}: foffset($color, xxs);
  }
}

@mixin max($size) {
  @if map.has-key($breakpoints-max, $size) {
    @media (max-width: #{map.get($breakpoints-max, $size)}px) {
      @content;
    }
  } @else {
    @media (max-width: #{$size}px) {
      @content;
    }
  }
}

@mixin min($size) {
  @if map.has-key($breakpoints-min, $size) {
    @media (min-width: #{map.get($breakpoints-min, $size)}px) {
      @content;
    }
  } @else {
    @media (min-width: #{$size}px) {
      @content;
    }
  }
}
